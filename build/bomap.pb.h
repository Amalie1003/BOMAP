// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bomap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bomap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bomap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bomap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bomap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bomap_2eproto;
class BucketMessage;
struct BucketMessageDefaultTypeInternal;
extern BucketMessageDefaultTypeInternal _BucketMessage_default_instance_;
class BucketReadMessage;
struct BucketReadMessageDefaultTypeInternal;
extern BucketReadMessageDefaultTypeInternal _BucketReadMessage_default_instance_;
class BucketReadResponse;
struct BucketReadResponseDefaultTypeInternal;
extern BucketReadResponseDefaultTypeInternal _BucketReadResponse_default_instance_;
class BucketWriteMessage;
struct BucketWriteMessageDefaultTypeInternal;
extern BucketWriteMessageDefaultTypeInternal _BucketWriteMessage_default_instance_;
class SetupRequest;
struct SetupRequestDefaultTypeInternal;
extern SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
class SetupResponse;
struct SetupResponseDefaultTypeInternal;
extern SetupResponseDefaultTypeInternal _SetupResponse_default_instance_;
class endMessage;
struct endMessageDefaultTypeInternal;
extern endMessageDefaultTypeInternal _endMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BucketMessage* Arena::CreateMaybeMessage<::BucketMessage>(Arena*);
template<> ::BucketReadMessage* Arena::CreateMaybeMessage<::BucketReadMessage>(Arena*);
template<> ::BucketReadResponse* Arena::CreateMaybeMessage<::BucketReadResponse>(Arena*);
template<> ::BucketWriteMessage* Arena::CreateMaybeMessage<::BucketWriteMessage>(Arena*);
template<> ::SetupRequest* Arena::CreateMaybeMessage<::SetupRequest>(Arena*);
template<> ::SetupResponse* Arena::CreateMaybeMessage<::SetupResponse>(Arena*);
template<> ::endMessage* Arena::CreateMaybeMessage<::endMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SetupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetupRequest) */ {
 public:
  inline SetupRequest() : SetupRequest(nullptr) {}
  ~SetupRequest() override;
  explicit constexpr SetupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupRequest(const SetupRequest& from);
  SetupRequest(SetupRequest&& from) noexcept
    : SetupRequest() {
    *this = ::std::move(from);
  }

  inline SetupRequest& operator=(const SetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequest& operator=(SetupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupRequest* internal_default_instance() {
    return reinterpret_cast<const SetupRequest*>(
               &_SetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetupRequest& a, SetupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupRequest* New() const final {
    return new SetupRequest();
  }

  SetupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetupRequest";
  }
  protected:
  explicit SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kMaxsizeFieldNumber = 2,
    kOramindexFieldNumber = 3,
    kIsFindFieldNumber = 4,
  };
  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxsize = 2;
  void clear_maxsize();
  ::PROTOBUF_NAMESPACE_ID::int32 maxsize() const;
  void set_maxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxsize() const;
  void _internal_set_maxsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oramindex = 3;
  void clear_oramindex();
  ::PROTOBUF_NAMESPACE_ID::int32 oramindex() const;
  void set_oramindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oramindex() const;
  void _internal_set_oramindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_find = 4;
  void clear_is_find();
  bool is_find() const;
  void set_is_find(bool value);
  private:
  bool _internal_is_find() const;
  void _internal_set_is_find(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SetupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 oramindex_;
  bool is_find_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class SetupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetupResponse) */ {
 public:
  inline SetupResponse() : SetupResponse(nullptr) {}
  ~SetupResponse() override;
  explicit constexpr SetupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupResponse(const SetupResponse& from);
  SetupResponse(SetupResponse&& from) noexcept
    : SetupResponse() {
    *this = ::std::move(from);
  }

  inline SetupResponse& operator=(const SetupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupResponse& operator=(SetupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupResponse* internal_default_instance() {
    return reinterpret_cast<const SetupResponse*>(
               &_SetupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetupResponse& a, SetupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupResponse* New() const final {
    return new SetupResponse();
  }

  SetupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetupResponse";
  }
  protected:
  explicit SetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // bool res = 1;
  void clear_res();
  bool res() const;
  void set_res(bool value);
  private:
  bool _internal_res() const;
  void _internal_set_res(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SetupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class BucketReadMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BucketReadMessage) */ {
 public:
  inline BucketReadMessage() : BucketReadMessage(nullptr) {}
  ~BucketReadMessage() override;
  explicit constexpr BucketReadMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketReadMessage(const BucketReadMessage& from);
  BucketReadMessage(BucketReadMessage&& from) noexcept
    : BucketReadMessage() {
    *this = ::std::move(from);
  }

  inline BucketReadMessage& operator=(const BucketReadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketReadMessage& operator=(BucketReadMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BucketReadMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketReadMessage* internal_default_instance() {
    return reinterpret_cast<const BucketReadMessage*>(
               &_BucketReadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BucketReadMessage& a, BucketReadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketReadMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketReadMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketReadMessage* New() const final {
    return new BucketReadMessage();
  }

  BucketReadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketReadMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BucketReadMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BucketReadMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketReadMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BucketReadMessage";
  }
  protected:
  explicit BucketReadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOramIndexFieldNumber = 2,
  };
  // int32 path = 1;
  void clear_path();
  ::PROTOBUF_NAMESPACE_ID::int32 path() const;
  void set_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_path() const;
  void _internal_set_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oram_index = 2;
  void clear_oram_index();
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index() const;
  void set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oram_index() const;
  void _internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BucketReadMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 path_;
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class BucketReadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BucketReadResponse) */ {
 public:
  inline BucketReadResponse() : BucketReadResponse(nullptr) {}
  ~BucketReadResponse() override;
  explicit constexpr BucketReadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketReadResponse(const BucketReadResponse& from);
  BucketReadResponse(BucketReadResponse&& from) noexcept
    : BucketReadResponse() {
    *this = ::std::move(from);
  }

  inline BucketReadResponse& operator=(const BucketReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketReadResponse& operator=(BucketReadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BucketReadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketReadResponse* internal_default_instance() {
    return reinterpret_cast<const BucketReadResponse*>(
               &_BucketReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BucketReadResponse& a, BucketReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketReadResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketReadResponse* New() const final {
    return new BucketReadResponse();
  }

  BucketReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketReadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BucketReadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BucketReadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BucketReadResponse";
  }
  protected:
  explicit BucketReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:BucketReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class BucketMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BucketMessage) */ {
 public:
  inline BucketMessage() : BucketMessage(nullptr) {}
  ~BucketMessage() override;
  explicit constexpr BucketMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketMessage(const BucketMessage& from);
  BucketMessage(BucketMessage&& from) noexcept
    : BucketMessage() {
    *this = ::std::move(from);
  }

  inline BucketMessage& operator=(const BucketMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketMessage& operator=(BucketMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BucketMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketMessage* internal_default_instance() {
    return reinterpret_cast<const BucketMessage*>(
               &_BucketMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BucketMessage& a, BucketMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketMessage* New() const final {
    return new BucketMessage();
  }

  BucketMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BucketMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BucketMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BucketMessage";
  }
  protected:
  explicit BucketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOramIndexFieldNumber = 3,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oram_index = 3;
  void clear_oram_index();
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index() const;
  void set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oram_index() const;
  void _internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BucketMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class BucketWriteMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BucketWriteMessage) */ {
 public:
  inline BucketWriteMessage() : BucketWriteMessage(nullptr) {}
  ~BucketWriteMessage() override;
  explicit constexpr BucketWriteMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BucketWriteMessage(const BucketWriteMessage& from);
  BucketWriteMessage(BucketWriteMessage&& from) noexcept
    : BucketWriteMessage() {
    *this = ::std::move(from);
  }

  inline BucketWriteMessage& operator=(const BucketWriteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketWriteMessage& operator=(BucketWriteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BucketWriteMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BucketWriteMessage* internal_default_instance() {
    return reinterpret_cast<const BucketWriteMessage*>(
               &_BucketWriteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BucketWriteMessage& a, BucketWriteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketWriteMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BucketWriteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketWriteMessage* New() const final {
    return new BucketWriteMessage();
  }

  BucketWriteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketWriteMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BucketWriteMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BucketWriteMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketWriteMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BucketWriteMessage";
  }
  protected:
  explicit BucketWriteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOramIndexFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // repeated bytes buffer = 1;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  const std::string& buffer(int index) const;
  std::string* mutable_buffer(int index);
  void set_buffer(int index, const std::string& value);
  void set_buffer(int index, std::string&& value);
  void set_buffer(int index, const char* value);
  void set_buffer(int index, const void* value, size_t size);
  std::string* add_buffer();
  void add_buffer(const std::string& value);
  void add_buffer(std::string&& value);
  void add_buffer(const char* value);
  void add_buffer(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buffer();
  private:
  const std::string& _internal_buffer(int index) const;
  std::string* _internal_add_buffer();
  public:

  // repeated int32 position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_position() const;
  void _internal_add_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_position();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 position(int index) const;
  void set_position(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_position();

  // int32 oram_index = 3;
  void clear_oram_index();
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index() const;
  void set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oram_index() const;
  void _internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BucketWriteMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buffer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > position_;
  mutable std::atomic<int> _position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 oram_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// -------------------------------------------------------------------

class endMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:endMessage) */ {
 public:
  inline endMessage() : endMessage(nullptr) {}
  ~endMessage() override;
  explicit constexpr endMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  endMessage(const endMessage& from);
  endMessage(endMessage&& from) noexcept
    : endMessage() {
    *this = ::std::move(from);
  }

  inline endMessage& operator=(const endMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline endMessage& operator=(endMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const endMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const endMessage* internal_default_instance() {
    return reinterpret_cast<const endMessage*>(
               &_endMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(endMessage& a, endMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(endMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(endMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline endMessage* New() const final {
    return new endMessage();
  }

  endMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<endMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const endMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const endMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(endMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "endMessage";
  }
  protected:
  explicit endMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 1,
  };
  // string end = 1;
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_MUST_USE_RESULT std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:endMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bomap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupRequest

// int32 level = 1;
inline void SetupRequest::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::level() const {
  // @@protoc_insertion_point(field_get:SetupRequest.level)
  return _internal_level();
}
inline void SetupRequest::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void SetupRequest::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:SetupRequest.level)
}

// int32 maxsize = 2;
inline void SetupRequest::clear_maxsize() {
  maxsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::_internal_maxsize() const {
  return maxsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::maxsize() const {
  // @@protoc_insertion_point(field_get:SetupRequest.maxsize)
  return _internal_maxsize();
}
inline void SetupRequest::_internal_set_maxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxsize_ = value;
}
inline void SetupRequest::set_maxsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxsize(value);
  // @@protoc_insertion_point(field_set:SetupRequest.maxsize)
}

// int32 oramindex = 3;
inline void SetupRequest::clear_oramindex() {
  oramindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::_internal_oramindex() const {
  return oramindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetupRequest::oramindex() const {
  // @@protoc_insertion_point(field_get:SetupRequest.oramindex)
  return _internal_oramindex();
}
inline void SetupRequest::_internal_set_oramindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oramindex_ = value;
}
inline void SetupRequest::set_oramindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oramindex(value);
  // @@protoc_insertion_point(field_set:SetupRequest.oramindex)
}

// bool is_find = 4;
inline void SetupRequest::clear_is_find() {
  is_find_ = false;
}
inline bool SetupRequest::_internal_is_find() const {
  return is_find_;
}
inline bool SetupRequest::is_find() const {
  // @@protoc_insertion_point(field_get:SetupRequest.is_find)
  return _internal_is_find();
}
inline void SetupRequest::_internal_set_is_find(bool value) {
  
  is_find_ = value;
}
inline void SetupRequest::set_is_find(bool value) {
  _internal_set_is_find(value);
  // @@protoc_insertion_point(field_set:SetupRequest.is_find)
}

// -------------------------------------------------------------------

// SetupResponse

// bool res = 1;
inline void SetupResponse::clear_res() {
  res_ = false;
}
inline bool SetupResponse::_internal_res() const {
  return res_;
}
inline bool SetupResponse::res() const {
  // @@protoc_insertion_point(field_get:SetupResponse.res)
  return _internal_res();
}
inline void SetupResponse::_internal_set_res(bool value) {
  
  res_ = value;
}
inline void SetupResponse::set_res(bool value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:SetupResponse.res)
}

// -------------------------------------------------------------------

// BucketReadMessage

// int32 path = 1;
inline void BucketReadMessage::clear_path() {
  path_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketReadMessage::_internal_path() const {
  return path_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketReadMessage::path() const {
  // @@protoc_insertion_point(field_get:BucketReadMessage.path)
  return _internal_path();
}
inline void BucketReadMessage::_internal_set_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  path_ = value;
}
inline void BucketReadMessage::set_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:BucketReadMessage.path)
}

// int32 oram_index = 2;
inline void BucketReadMessage::clear_oram_index() {
  oram_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketReadMessage::_internal_oram_index() const {
  return oram_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketReadMessage::oram_index() const {
  // @@protoc_insertion_point(field_get:BucketReadMessage.oram_index)
  return _internal_oram_index();
}
inline void BucketReadMessage::_internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oram_index_ = value;
}
inline void BucketReadMessage::set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oram_index(value);
  // @@protoc_insertion_point(field_set:BucketReadMessage.oram_index)
}

// -------------------------------------------------------------------

// BucketReadResponse

// bytes buffer = 1;
inline void BucketReadResponse::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& BucketReadResponse::buffer() const {
  // @@protoc_insertion_point(field_get:BucketReadResponse.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketReadResponse::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BucketReadResponse.buffer)
}
inline std::string* BucketReadResponse::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:BucketReadResponse.buffer)
  return _s;
}
inline const std::string& BucketReadResponse::_internal_buffer() const {
  return buffer_.Get();
}
inline void BucketReadResponse::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BucketReadResponse::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BucketReadResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:BucketReadResponse.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BucketReadResponse::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:BucketReadResponse.buffer)
}

// -------------------------------------------------------------------

// BucketMessage

// bytes buffer = 1;
inline void BucketMessage::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& BucketMessage::buffer() const {
  // @@protoc_insertion_point(field_get:BucketMessage.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BucketMessage::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BucketMessage.buffer)
}
inline std::string* BucketMessage::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:BucketMessage.buffer)
  return _s;
}
inline const std::string& BucketMessage::_internal_buffer() const {
  return buffer_.Get();
}
inline void BucketMessage::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BucketMessage::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BucketMessage::release_buffer() {
  // @@protoc_insertion_point(field_release:BucketMessage.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BucketMessage::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:BucketMessage.buffer)
}

// int32 position = 2;
inline void BucketMessage::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketMessage::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketMessage::position() const {
  // @@protoc_insertion_point(field_get:BucketMessage.position)
  return _internal_position();
}
inline void BucketMessage::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void BucketMessage::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:BucketMessage.position)
}

// int32 oram_index = 3;
inline void BucketMessage::clear_oram_index() {
  oram_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketMessage::_internal_oram_index() const {
  return oram_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketMessage::oram_index() const {
  // @@protoc_insertion_point(field_get:BucketMessage.oram_index)
  return _internal_oram_index();
}
inline void BucketMessage::_internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oram_index_ = value;
}
inline void BucketMessage::set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oram_index(value);
  // @@protoc_insertion_point(field_set:BucketMessage.oram_index)
}

// -------------------------------------------------------------------

// BucketWriteMessage

// repeated bytes buffer = 1;
inline int BucketWriteMessage::_internal_buffer_size() const {
  return buffer_.size();
}
inline int BucketWriteMessage::buffer_size() const {
  return _internal_buffer_size();
}
inline void BucketWriteMessage::clear_buffer() {
  buffer_.Clear();
}
inline std::string* BucketWriteMessage::add_buffer() {
  std::string* _s = _internal_add_buffer();
  // @@protoc_insertion_point(field_add_mutable:BucketWriteMessage.buffer)
  return _s;
}
inline const std::string& BucketWriteMessage::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline const std::string& BucketWriteMessage::buffer(int index) const {
  // @@protoc_insertion_point(field_get:BucketWriteMessage.buffer)
  return _internal_buffer(index);
}
inline std::string* BucketWriteMessage::mutable_buffer(int index) {
  // @@protoc_insertion_point(field_mutable:BucketWriteMessage.buffer)
  return buffer_.Mutable(index);
}
inline void BucketWriteMessage::set_buffer(int index, const std::string& value) {
  buffer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::set_buffer(int index, std::string&& value) {
  buffer_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::set_buffer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buffer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::set_buffer(int index, const void* value, size_t size) {
  buffer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BucketWriteMessage.buffer)
}
inline std::string* BucketWriteMessage::_internal_add_buffer() {
  return buffer_.Add();
}
inline void BucketWriteMessage::add_buffer(const std::string& value) {
  buffer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::add_buffer(std::string&& value) {
  buffer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::add_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buffer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BucketWriteMessage.buffer)
}
inline void BucketWriteMessage::add_buffer(const void* value, size_t size) {
  buffer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BucketWriteMessage.buffer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BucketWriteMessage::buffer() const {
  // @@protoc_insertion_point(field_list:BucketWriteMessage.buffer)
  return buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BucketWriteMessage::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:BucketWriteMessage.buffer)
  return &buffer_;
}

// repeated int32 position = 2;
inline int BucketWriteMessage::_internal_position_size() const {
  return position_.size();
}
inline int BucketWriteMessage::position_size() const {
  return _internal_position_size();
}
inline void BucketWriteMessage::clear_position() {
  position_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::_internal_position(int index) const {
  return position_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::position(int index) const {
  // @@protoc_insertion_point(field_get:BucketWriteMessage.position)
  return _internal_position(index);
}
inline void BucketWriteMessage::set_position(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:BucketWriteMessage.position)
}
inline void BucketWriteMessage::_internal_add_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  position_.Add(value);
}
inline void BucketWriteMessage::add_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:BucketWriteMessage.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BucketWriteMessage::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BucketWriteMessage::position() const {
  // @@protoc_insertion_point(field_list:BucketWriteMessage.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BucketWriteMessage::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BucketWriteMessage::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:BucketWriteMessage.position)
  return _internal_mutable_position();
}

// int32 oram_index = 3;
inline void BucketWriteMessage::clear_oram_index() {
  oram_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::_internal_oram_index() const {
  return oram_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::oram_index() const {
  // @@protoc_insertion_point(field_get:BucketWriteMessage.oram_index)
  return _internal_oram_index();
}
inline void BucketWriteMessage::_internal_set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oram_index_ = value;
}
inline void BucketWriteMessage::set_oram_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oram_index(value);
  // @@protoc_insertion_point(field_set:BucketWriteMessage.oram_index)
}

// int32 num = 4;
inline void BucketWriteMessage::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BucketWriteMessage::num() const {
  // @@protoc_insertion_point(field_get:BucketWriteMessage.num)
  return _internal_num();
}
inline void BucketWriteMessage::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void BucketWriteMessage::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:BucketWriteMessage.num)
}

// -------------------------------------------------------------------

// endMessage

// string end = 1;
inline void endMessage::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& endMessage::end() const {
  // @@protoc_insertion_point(field_get:endMessage.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void endMessage::set_end(ArgT0&& arg0, ArgT... args) {
 
 end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:endMessage.end)
}
inline std::string* endMessage::mutable_end() {
  std::string* _s = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:endMessage.end)
  return _s;
}
inline const std::string& endMessage::_internal_end() const {
  return end_.Get();
}
inline void endMessage::_internal_set_end(const std::string& value) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* endMessage::_internal_mutable_end() {
  
  return end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* endMessage::release_end() {
  // @@protoc_insertion_point(field_release:endMessage.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void endMessage::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:endMessage.end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bomap_2eproto
