// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bomap.proto

#include "bomap.pb.h"
#include "bomap.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* bomap_method_names[] = {
  "/bomap/Setup",
  "/bomap/init_dummy",
  "/bomap/read_bucket",
  "/bomap/write_bucket",
  "/bomap/end_signal",
};

std::unique_ptr< bomap::Stub> bomap::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< bomap::Stub> stub(new bomap::Stub(channel, options));
  return stub;
}

bomap::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Setup_(bomap_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_dummy_(bomap_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_bucket_(bomap_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_bucket_(bomap_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_end_signal_(bomap_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status bomap::Stub::Setup(::grpc::ClientContext* context, const ::SetupRequest& request, ::SetupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetupRequest, ::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Setup_, context, request, response);
}

void bomap::Stub::async::Setup(::grpc::ClientContext* context, const ::SetupRequest* request, ::SetupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetupRequest, ::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, std::move(f));
}

void bomap::Stub::async::Setup(::grpc::ClientContext* context, const ::SetupRequest* request, ::SetupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetupResponse>* bomap::Stub::PrepareAsyncSetupRaw(::grpc::ClientContext* context, const ::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetupResponse, ::SetupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Setup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetupResponse>* bomap::Stub::AsyncSetupRaw(::grpc::ClientContext* context, const ::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status bomap::Stub::init_dummy(::grpc::ClientContext* context, const ::BucketMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BucketMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_dummy_, context, request, response);
}

void bomap::Stub::async::init_dummy(::grpc::ClientContext* context, const ::BucketMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BucketMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_dummy_, context, request, response, std::move(f));
}

void bomap::Stub::async::init_dummy(::grpc::ClientContext* context, const ::BucketMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_dummy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::PrepareAsyncinit_dummyRaw(::grpc::ClientContext* context, const ::BucketMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::BucketMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_dummy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::Asyncinit_dummyRaw(::grpc::ClientContext* context, const ::BucketMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_dummyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status bomap::Stub::read_bucket(::grpc::ClientContext* context, const ::BucketReadMessage& request, ::BucketReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BucketReadMessage, ::BucketReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_read_bucket_, context, request, response);
}

void bomap::Stub::async::read_bucket(::grpc::ClientContext* context, const ::BucketReadMessage* request, ::BucketReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BucketReadMessage, ::BucketReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_bucket_, context, request, response, std::move(f));
}

void bomap::Stub::async::read_bucket(::grpc::ClientContext* context, const ::BucketReadMessage* request, ::BucketReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_read_bucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BucketReadResponse>* bomap::Stub::PrepareAsyncread_bucketRaw(::grpc::ClientContext* context, const ::BucketReadMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BucketReadResponse, ::BucketReadMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_read_bucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BucketReadResponse>* bomap::Stub::Asyncread_bucketRaw(::grpc::ClientContext* context, const ::BucketReadMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncread_bucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status bomap::Stub::write_bucket(::grpc::ClientContext* context, const ::BucketWriteMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BucketWriteMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_write_bucket_, context, request, response);
}

void bomap::Stub::async::write_bucket(::grpc::ClientContext* context, const ::BucketWriteMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BucketWriteMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_bucket_, context, request, response, std::move(f));
}

void bomap::Stub::async::write_bucket(::grpc::ClientContext* context, const ::BucketWriteMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_write_bucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::PrepareAsyncwrite_bucketRaw(::grpc::ClientContext* context, const ::BucketWriteMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::BucketWriteMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_write_bucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::Asyncwrite_bucketRaw(::grpc::ClientContext* context, const ::BucketWriteMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwrite_bucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status bomap::Stub::end_signal(::grpc::ClientContext* context, const ::endMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::endMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_end_signal_, context, request, response);
}

void bomap::Stub::async::end_signal(::grpc::ClientContext* context, const ::endMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::endMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end_signal_, context, request, response, std::move(f));
}

void bomap::Stub::async::end_signal(::grpc::ClientContext* context, const ::endMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end_signal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::PrepareAsyncend_signalRaw(::grpc::ClientContext* context, const ::endMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::endMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_end_signal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* bomap::Stub::Asyncend_signalRaw(::grpc::ClientContext* context, const ::endMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncend_signalRaw(context, request, cq);
  result->StartCall();
  return result;
}

bomap::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bomap_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bomap::Service, ::SetupRequest, ::SetupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](bomap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetupRequest* req,
             ::SetupResponse* resp) {
               return service->Setup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bomap_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bomap::Service, ::BucketMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](bomap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BucketMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->init_dummy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bomap_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bomap::Service, ::BucketReadMessage, ::BucketReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](bomap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BucketReadMessage* req,
             ::BucketReadResponse* resp) {
               return service->read_bucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bomap_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bomap::Service, ::BucketWriteMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](bomap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BucketWriteMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->write_bucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bomap_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bomap::Service, ::endMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](bomap::Service* service,
             ::grpc::ServerContext* ctx,
             const ::endMessage* req,
             ::google::protobuf::Empty* resp) {
               return service->end_signal(ctx, req, resp);
             }, this)));
}

bomap::Service::~Service() {
}

::grpc::Status bomap::Service::Setup(::grpc::ServerContext* context, const ::SetupRequest* request, ::SetupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bomap::Service::init_dummy(::grpc::ServerContext* context, const ::BucketMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bomap::Service::read_bucket(::grpc::ServerContext* context, const ::BucketReadMessage* request, ::BucketReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bomap::Service::write_bucket(::grpc::ServerContext* context, const ::BucketWriteMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bomap::Service::end_signal(::grpc::ServerContext* context, const ::endMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


