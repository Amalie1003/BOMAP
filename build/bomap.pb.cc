// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bomap.proto

#include "bomap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SetupRequest::SetupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , maxsize_(0)
  , oramindex_(0)
  , is_find_(false){}
struct SetupRequestDefaultTypeInternal {
  constexpr SetupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupRequestDefaultTypeInternal() {}
  union {
    SetupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
constexpr SetupResponse::SetupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(false){}
struct SetupResponseDefaultTypeInternal {
  constexpr SetupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupResponseDefaultTypeInternal() {}
  union {
    SetupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupResponseDefaultTypeInternal _SetupResponse_default_instance_;
constexpr BucketReadMessage::BucketReadMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(0)
  , oram_index_(0){}
struct BucketReadMessageDefaultTypeInternal {
  constexpr BucketReadMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketReadMessageDefaultTypeInternal() {}
  union {
    BucketReadMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketReadMessageDefaultTypeInternal _BucketReadMessage_default_instance_;
constexpr BucketReadResponse::BucketReadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BucketReadResponseDefaultTypeInternal {
  constexpr BucketReadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketReadResponseDefaultTypeInternal() {}
  union {
    BucketReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketReadResponseDefaultTypeInternal _BucketReadResponse_default_instance_;
constexpr BucketMessage::BucketMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(0)
  , oram_index_(0){}
struct BucketMessageDefaultTypeInternal {
  constexpr BucketMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketMessageDefaultTypeInternal() {}
  union {
    BucketMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketMessageDefaultTypeInternal _BucketMessage_default_instance_;
constexpr BucketWriteMessage::BucketWriteMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_()
  , position_()
  , _position_cached_byte_size_(0)
  , oram_index_(0)
  , num_(0){}
struct BucketWriteMessageDefaultTypeInternal {
  constexpr BucketWriteMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BucketWriteMessageDefaultTypeInternal() {}
  union {
    BucketWriteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BucketWriteMessageDefaultTypeInternal _BucketWriteMessage_default_instance_;
constexpr endMessage::endMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct endMessageDefaultTypeInternal {
  constexpr endMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~endMessageDefaultTypeInternal() {}
  union {
    endMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT endMessageDefaultTypeInternal _endMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bomap_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bomap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bomap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bomap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetupRequest, level_),
  PROTOBUF_FIELD_OFFSET(::SetupRequest, maxsize_),
  PROTOBUF_FIELD_OFFSET(::SetupRequest, oramindex_),
  PROTOBUF_FIELD_OFFSET(::SetupRequest, is_find_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetupResponse, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, path_),
  PROTOBUF_FIELD_OFFSET(::BucketReadMessage, oram_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BucketReadResponse, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BucketMessage, buffer_),
  PROTOBUF_FIELD_OFFSET(::BucketMessage, position_),
  PROTOBUF_FIELD_OFFSET(::BucketMessage, oram_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, buffer_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, position_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, oram_index_),
  PROTOBUF_FIELD_OFFSET(::BucketWriteMessage, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::endMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::endMessage, end_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SetupRequest)},
  { 10, -1, -1, sizeof(::SetupResponse)},
  { 17, -1, -1, sizeof(::BucketReadMessage)},
  { 25, -1, -1, sizeof(::BucketReadResponse)},
  { 32, -1, -1, sizeof(::BucketMessage)},
  { 41, -1, -1, sizeof(::BucketWriteMessage)},
  { 51, -1, -1, sizeof(::endMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketReadMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketReadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BucketWriteMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_endMessage_default_instance_),
};

const char descriptor_table_protodef_bomap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013bomap.proto\032\033google/protobuf/empty.pro"
  "to\"R\n\014SetupRequest\022\r\n\005level\030\001 \001(\005\022\017\n\007max"
  "size\030\002 \001(\005\022\021\n\toramindex\030\003 \001(\005\022\017\n\007is_find"
  "\030\004 \001(\010\"\034\n\rSetupResponse\022\013\n\003res\030\001 \001(\010\"5\n\021"
  "BucketReadMessage\022\014\n\004path\030\001 \001(\005\022\022\n\noram_"
  "index\030\002 \001(\005\"$\n\022BucketReadResponse\022\016\n\006buf"
  "fer\030\001 \001(\014\"E\n\rBucketMessage\022\016\n\006buffer\030\001 \001"
  "(\014\022\020\n\010position\030\002 \001(\005\022\022\n\noram_index\030\003 \001(\005"
  "\"W\n\022BucketWriteMessage\022\016\n\006buffer\030\001 \003(\014\022\020"
  "\n\010position\030\002 \003(\005\022\022\n\noram_index\030\003 \001(\005\022\013\n\003"
  "num\030\004 \001(\005\"\031\n\nendMessage\022\013\n\003end\030\001 \001(\t2\227\002\n"
  "\005bomap\022(\n\005Setup\022\r.SetupRequest\032\016.SetupRe"
  "sponse\"\000\0226\n\ninit_dummy\022\016.BucketMessage\032\026"
  ".google.protobuf.Empty\"\000\0228\n\013read_bucket\022"
  "\022.BucketReadMessage\032\023.BucketReadResponse"
  "\"\000\022=\n\014write_bucket\022\023.BucketWriteMessage\032"
  "\026.google.protobuf.Empty\"\000\0223\n\nend_signal\022"
  "\013.endMessage\032\026.google.protobuf.Empty\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bomap_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bomap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bomap_2eproto = {
  false, false, 726, descriptor_table_protodef_bomap_2eproto, "bomap.proto", 
  &descriptor_table_bomap_2eproto_once, descriptor_table_bomap_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_bomap_2eproto::offsets,
  file_level_metadata_bomap_2eproto, file_level_enum_descriptors_bomap_2eproto, file_level_service_descriptors_bomap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bomap_2eproto_getter() {
  return &descriptor_table_bomap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bomap_2eproto(&descriptor_table_bomap_2eproto);

// ===================================================================

class SetupRequest::_Internal {
 public:
};

SetupRequest::SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetupRequest)
}
SetupRequest::SetupRequest(const SetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_find_) -
    reinterpret_cast<char*>(&level_)) + sizeof(is_find_));
  // @@protoc_insertion_point(copy_constructor:SetupRequest)
}

void SetupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_find_) -
    reinterpret_cast<char*>(&level_)) + sizeof(is_find_));
}

SetupRequest::~SetupRequest() {
  // @@protoc_insertion_point(destructor:SetupRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupRequest::ArenaDtor(void* object) {
  SetupRequest* _this = reinterpret_cast< SetupRequest* >(object);
  (void)_this;
}
void SetupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_find_) -
      reinterpret_cast<char*>(&level_)) + sizeof(is_find_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxsize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oramindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oramindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_find = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_find_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 maxsize = 2;
  if (this->_internal_maxsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxsize(), target);
  }

  // int32 oramindex = 3;
  if (this->_internal_oramindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_oramindex(), target);
  }

  // bool is_find = 4;
  if (this->_internal_is_find() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_find(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupRequest)
  return target;
}

size_t SetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 maxsize = 2;
  if (this->_internal_maxsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maxsize());
  }

  // int32 oramindex = 3;
  if (this->_internal_oramindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_oramindex());
  }

  // bool is_find = 4;
  if (this->_internal_is_find() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupRequest::GetClassData() const { return &_class_data_; }

void SetupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetupRequest *>(to)->MergeFrom(
      static_cast<const SetupRequest &>(from));
}


void SetupRequest::MergeFrom(const SetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_maxsize() != 0) {
    _internal_set_maxsize(from._internal_maxsize());
  }
  if (from._internal_oramindex() != 0) {
    _internal_set_oramindex(from._internal_oramindex());
  }
  if (from._internal_is_find() != 0) {
    _internal_set_is_find(from._internal_is_find());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupRequest::CopyFrom(const SetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupRequest::IsInitialized() const {
  return true;
}

void SetupRequest::InternalSwap(SetupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupRequest, is_find_)
      + sizeof(SetupRequest::is_find_)
      - PROTOBUF_FIELD_OFFSET(SetupRequest, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[0]);
}

// ===================================================================

class SetupResponse::_Internal {
 public:
};

SetupResponse::SetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetupResponse)
}
SetupResponse::SetupResponse(const SetupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:SetupResponse)
}

void SetupResponse::SharedCtor() {
res_ = false;
}

SetupResponse::~SetupResponse() {
  // @@protoc_insertion_point(destructor:SetupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupResponse::ArenaDtor(void* object) {
  SetupResponse* _this = reinterpret_cast< SetupResponse* >(object);
  (void)_this;
}
void SetupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupResponse)
  return target;
}

size_t SetupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupResponse::GetClassData() const { return &_class_data_; }

void SetupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetupResponse *>(to)->MergeFrom(
      static_cast<const SetupResponse &>(from));
}


void SetupResponse::MergeFrom(const SetupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupResponse::CopyFrom(const SetupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupResponse::IsInitialized() const {
  return true;
}

void SetupResponse::InternalSwap(SetupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[1]);
}

// ===================================================================

class BucketReadMessage::_Internal {
 public:
};

BucketReadMessage::BucketReadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketReadMessage)
}
BucketReadMessage::BucketReadMessage(const BucketReadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&path_, &from.path_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_index_) -
    reinterpret_cast<char*>(&path_)) + sizeof(oram_index_));
  // @@protoc_insertion_point(copy_constructor:BucketReadMessage)
}

void BucketReadMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_index_) -
    reinterpret_cast<char*>(&path_)) + sizeof(oram_index_));
}

BucketReadMessage::~BucketReadMessage() {
  // @@protoc_insertion_point(destructor:BucketReadMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketReadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BucketReadMessage::ArenaDtor(void* object) {
  BucketReadMessage* _this = reinterpret_cast< BucketReadMessage* >(object);
  (void)_this;
}
void BucketReadMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketReadMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketReadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketReadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_index_) -
      reinterpret_cast<char*>(&path_)) + sizeof(oram_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketReadMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oram_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          oram_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketReadMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketReadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 path = 1;
  if (this->_internal_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_path(), target);
  }

  // int32 oram_index = 2;
  if (this->_internal_oram_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_oram_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketReadMessage)
  return target;
}

size_t BucketReadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketReadMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 path = 1;
  if (this->_internal_path() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_path());
  }

  // int32 oram_index = 2;
  if (this->_internal_oram_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_oram_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketReadMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketReadMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketReadMessage::GetClassData() const { return &_class_data_; }

void BucketReadMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BucketReadMessage *>(to)->MergeFrom(
      static_cast<const BucketReadMessage &>(from));
}


void BucketReadMessage::MergeFrom(const BucketReadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketReadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_path() != 0) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_oram_index() != 0) {
    _internal_set_oram_index(from._internal_oram_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketReadMessage::CopyFrom(const BucketReadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketReadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketReadMessage::IsInitialized() const {
  return true;
}

void BucketReadMessage::InternalSwap(BucketReadMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketReadMessage, oram_index_)
      + sizeof(BucketReadMessage::oram_index_)
      - PROTOBUF_FIELD_OFFSET(BucketReadMessage, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketReadMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[2]);
}

// ===================================================================

class BucketReadResponse::_Internal {
 public:
};

BucketReadResponse::BucketReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketReadResponse)
}
BucketReadResponse::BucketReadResponse(const BucketReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:BucketReadResponse)
}

void BucketReadResponse::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BucketReadResponse::~BucketReadResponse() {
  // @@protoc_insertion_point(destructor:BucketReadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BucketReadResponse::ArenaDtor(void* object) {
  BucketReadResponse* _this = reinterpret_cast< BucketReadResponse* >(object);
  (void)_this;
}
void BucketReadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketReadResponse)
  return target;
}

size_t BucketReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketReadResponse::GetClassData() const { return &_class_data_; }

void BucketReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BucketReadResponse *>(to)->MergeFrom(
      static_cast<const BucketReadResponse &>(from));
}


void BucketReadResponse::MergeFrom(const BucketReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketReadResponse::CopyFrom(const BucketReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketReadResponse::IsInitialized() const {
  return true;
}

void BucketReadResponse::InternalSwap(BucketReadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketReadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[3]);
}

// ===================================================================

class BucketMessage::_Internal {
 public:
};

BucketMessage::BucketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketMessage)
}
BucketMessage::BucketMessage(const BucketMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&oram_index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(oram_index_));
  // @@protoc_insertion_point(copy_constructor:BucketMessage)
}

void BucketMessage::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oram_index_) -
    reinterpret_cast<char*>(&position_)) + sizeof(oram_index_));
}

BucketMessage::~BucketMessage() {
  // @@protoc_insertion_point(destructor:BucketMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BucketMessage::ArenaDtor(void* object) {
  BucketMessage* _this = reinterpret_cast< BucketMessage* >(object);
  (void)_this;
}
void BucketMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oram_index_) -
      reinterpret_cast<char*>(&position_)) + sizeof(oram_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oram_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oram_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // int32 oram_index = 3;
  if (this->_internal_oram_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_oram_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketMessage)
  return target;
}

size_t BucketMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // int32 position = 2;
  if (this->_internal_position() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  // int32 oram_index = 3;
  if (this->_internal_oram_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_oram_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketMessage::GetClassData() const { return &_class_data_; }

void BucketMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BucketMessage *>(to)->MergeFrom(
      static_cast<const BucketMessage &>(from));
}


void BucketMessage::MergeFrom(const BucketMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from._internal_oram_index() != 0) {
    _internal_set_oram_index(from._internal_oram_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketMessage::CopyFrom(const BucketMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketMessage::IsInitialized() const {
  return true;
}

void BucketMessage::InternalSwap(BucketMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketMessage, oram_index_)
      + sizeof(BucketMessage::oram_index_)
      - PROTOBUF_FIELD_OFFSET(BucketMessage, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[4]);
}

// ===================================================================

class BucketWriteMessage::_Internal {
 public:
};

BucketWriteMessage::BucketWriteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buffer_(arena),
  position_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BucketWriteMessage)
}
BucketWriteMessage::BucketWriteMessage(const BucketWriteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffer_(from.buffer_),
      position_(from.position_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oram_index_, &from.oram_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&oram_index_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:BucketWriteMessage)
}

void BucketWriteMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oram_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&oram_index_)) + sizeof(num_));
}

BucketWriteMessage::~BucketWriteMessage() {
  // @@protoc_insertion_point(destructor:BucketWriteMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BucketWriteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BucketWriteMessage::ArenaDtor(void* object) {
  BucketWriteMessage* _this = reinterpret_cast< BucketWriteMessage* >(object);
  (void)_this;
}
void BucketWriteMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BucketWriteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BucketWriteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BucketWriteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.Clear();
  position_.Clear();
  ::memset(&oram_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&oram_index_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BucketWriteMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buffer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oram_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oram_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BucketWriteMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BucketWriteMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  for (int i = 0, n = this->_internal_buffer_size(); i < n; i++) {
    const auto& s = this->_internal_buffer(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated int32 position = 2;
  {
    int byte_size = _position_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_position(), byte_size, target);
    }
  }

  // int32 oram_index = 3;
  if (this->_internal_oram_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_oram_index(), target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BucketWriteMessage)
  return target;
}

size_t BucketWriteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BucketWriteMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes buffer = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buffer_.size());
  for (int i = 0, n = buffer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      buffer_.Get(i));
  }

  // repeated int32 position = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->position_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 oram_index = 3;
  if (this->_internal_oram_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_oram_index());
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BucketWriteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BucketWriteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BucketWriteMessage::GetClassData() const { return &_class_data_; }

void BucketWriteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BucketWriteMessage *>(to)->MergeFrom(
      static_cast<const BucketWriteMessage &>(from));
}


void BucketWriteMessage::MergeFrom(const BucketWriteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BucketWriteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_.MergeFrom(from.buffer_);
  position_.MergeFrom(from.position_);
  if (from._internal_oram_index() != 0) {
    _internal_set_oram_index(from._internal_oram_index());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BucketWriteMessage::CopyFrom(const BucketWriteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BucketWriteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketWriteMessage::IsInitialized() const {
  return true;
}

void BucketWriteMessage::InternalSwap(BucketWriteMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffer_.InternalSwap(&other->buffer_);
  position_.InternalSwap(&other->position_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BucketWriteMessage, num_)
      + sizeof(BucketWriteMessage::num_)
      - PROTOBUF_FIELD_OFFSET(BucketWriteMessage, oram_index_)>(
          reinterpret_cast<char*>(&oram_index_),
          reinterpret_cast<char*>(&other->oram_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BucketWriteMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[5]);
}

// ===================================================================

class endMessage::_Internal {
 public:
};

endMessage::endMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:endMessage)
}
endMessage::endMessage(const endMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:endMessage)
}

void endMessage::SharedCtor() {
end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

endMessage::~endMessage() {
  // @@protoc_insertion_point(destructor:endMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void endMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void endMessage::ArenaDtor(void* object) {
  endMessage* _this = reinterpret_cast< endMessage* >(object);
  (void)_this;
}
void endMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void endMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void endMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:endMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* endMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "endMessage.end"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* endMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:endMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string end = 1;
  if (!this->_internal_end().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "endMessage.end");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:endMessage)
  return target;
}

size_t endMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:endMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string end = 1;
  if (!this->_internal_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData endMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    endMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*endMessage::GetClassData() const { return &_class_data_; }

void endMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<endMessage *>(to)->MergeFrom(
      static_cast<const endMessage &>(from));
}


void endMessage::MergeFrom(const endMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:endMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_end().empty()) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void endMessage::CopyFrom(const endMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:endMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool endMessage::IsInitialized() const {
  return true;
}

void endMessage::InternalSwap(endMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_, lhs_arena,
      &other->end_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata endMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bomap_2eproto_getter, &descriptor_table_bomap_2eproto_once,
      file_level_metadata_bomap_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SetupRequest* Arena::CreateMaybeMessage< ::SetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupResponse* Arena::CreateMaybeMessage< ::SetupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketReadMessage* Arena::CreateMaybeMessage< ::BucketReadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketReadMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketReadResponse* Arena::CreateMaybeMessage< ::BucketReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketMessage* Arena::CreateMaybeMessage< ::BucketMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BucketWriteMessage* Arena::CreateMaybeMessage< ::BucketWriteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BucketWriteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::endMessage* Arena::CreateMaybeMessage< ::endMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::endMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
